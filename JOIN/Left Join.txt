С помощью LEFT JOIN объедините таблицы user_actions и users по ключу user_id. 
Обратите внимание на порядок таблиц — слева users_actions, справа users. 
В результат включите две колонки с user_id из обеих таблиц. 
Эти две колонки назовите соответственно user_id_left и user_id_right. 
Также в результат включите колонки order_id, time, action, sex, birth_date. 
Отсортируйте получившуюся таблицу по возрастанию id пользователя (в колонке из левой таблицы).
Поля в результирующей таблице: user_id_left, user_id_right,  order_id, time, action, sex, birth_date

SELECT user_actions.user_id as user_id_left,
       users.user_id as user_id_right,
       order_id,
       time,
       action,
       sex,
       birth_date
FROM   user_actions
    LEFT JOIN users using(user_id)
ORDER BY user_actions.user_id ;

----------------------------------------------------------------------------------------
Gосчитайте количество уникальных id в колонке user_id, пришедшей из левой таблицы user_actions. 
Выведите это количество в качестве результата. 
Колонку с посчитанным значением назовите users_count.
Поле в результирующей таблице: users_count

SELECT count(distinct user_actions.user_id) as users_count
FROM   user_actions
    LEFT JOIN users using(user_id) ;

----------------------------------------------------------------------------------------
Добавьте к запросу оператор WHERE и исключите NULL значения в колонке user_id из правой таблицы. 
Включите в результат все те же колонки и отсортируйте получившуюся таблицу по возрастанию id пользователя в колонке из левой таблицы.
Поля в результирующей таблице: user_id_left, user_id_right,  order_id, time, action, sex, birth_date

SELECT user_actions.user_id as user_id_left,
       users.user_id as user_id_right,
       order_id,
       time,
       action,
       sex,
       birth_date
FROM   user_actions
    LEFT JOIN users using(user_id)
WHERE  users.user_id is not null
ORDER BY user_actions.user_id ;

----------------------------------------------------------------------------------------
Для начала объедините таблицы user_actions и orders. В качестве ключа используйте поле order_id. 
Выведите id пользователей и заказов, а также список товаров в заказе. 
Отсортируйте таблицу по id пользователя по возрастанию, затем по id заказа — тоже по возрастанию.
Добавьте в запрос оператор LIMIT и выведите только первые 1000 строк результирующей таблицы.
Поля в результирующей таблице: user_id, order_id, product_ids

SELECT user_id,
       order_id,
       product_ids
FROM   user_actions
    LEFT JOIN orders using(order_id)
ORDER BY user_id, order_id limit 1000 ;

----------------------------------------------------------------------------------------
Объедините таблицы user_actions и orders, но теперь оставьте только уникальные неотменённые заказы. 
Остальные условия задачи те же: вывести id пользователей и заказов, а также список товаров в заказе. 
Отсортируйте таблицу по id пользователя по возрастанию, затем по id заказа — тоже по возрастанию.
Добавьте в запрос оператор LIMIT и выведите только первые 1000 строк результирующей таблицы.
Поля в результирующей таблице: user_id, order_id, product_ids

WITH t3 AS(
    SELECT order_id
    FROM user_actions
    WHERE action = 'cancel_order'
)
SELECT t1.user_id, t1.order_id, t2.product_ids
FROM user_actions t1
    LEFT JOIN orders t2
USING(order_id)
WHERE t1.order_id NOT IN (SELECT * FROM t3)
ORDER BY user_id, order_id
LIMIT 1000 ;

----------------------------------------------------------------------------------------
Посчитайте, сколько в среднем товаров заказывает каждый пользователь. 
Выведите id пользователя и среднее количество товаров в заказе. 
Среднее значение округлите до двух знаков после запятой. 
Колонку посчитанными значениями назовите avg_order_size. 
Результат выполнения запроса отсортируйте по возрастанию id пользователя. 
Добавьте в запрос оператор LIMIT и выведите только первые 1000 строк результирующей таблицы.
Поля в результирующей таблице: user_id, avg_order_size

WITH t3 AS(
   SELECT order_id
   FROM   user_actions
   WHERE  action = 'cancel_order'
)
SELECT t1.user_id, ROUND(AVG(ARRAY_LENGTH(product_ids, 1)), 2) AS avg_order_size
FROM   user_actions t1
    LEFT JOIN orders t2 
    USING(order_id)
WHERE  t1.order_id not in (SELECT * FROM   t3)
GROUP BY t1.user_id
ORDER BY user_id
LIMIT 1000 ;

----------------------------------------------------------------------------------------
