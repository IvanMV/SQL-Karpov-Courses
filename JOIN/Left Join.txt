С помощью LEFT JOIN объедините таблицы user_actions и users по ключу user_id. 
Обратите внимание на порядок таблиц — слева users_actions, справа users. 
В результат включите две колонки с user_id из обеих таблиц. 
Эти две колонки назовите соответственно user_id_left и user_id_right. 
Также в результат включите колонки order_id, time, action, sex, birth_date. 
Отсортируйте получившуюся таблицу по возрастанию id пользователя (в колонке из левой таблицы).
Поля в результирующей таблице: user_id_left, user_id_right,  order_id, time, action, sex, birth_date

SELECT user_actions.user_id as user_id_left,
       users.user_id as user_id_right,
       order_id,
       time,
       action,
       sex,
       birth_date
FROM   user_actions
    LEFT JOIN users using(user_id)
ORDER BY user_actions.user_id ;

----------------------------------------------------------------------------------------
Gосчитайте количество уникальных id в колонке user_id, пришедшей из левой таблицы user_actions. 
Выведите это количество в качестве результата. 
Колонку с посчитанным значением назовите users_count.
Поле в результирующей таблице: users_count

SELECT count(distinct user_actions.user_id) as users_count
FROM   user_actions
    LEFT JOIN users using(user_id) ;

----------------------------------------------------------------------------------------
Добавьте к запросу оператор WHERE и исключите NULL значения в колонке user_id из правой таблицы. 
Включите в результат все те же колонки и отсортируйте получившуюся таблицу по возрастанию id пользователя в колонке из левой таблицы.
Поля в результирующей таблице: user_id_left, user_id_right,  order_id, time, action, sex, birth_date

SELECT user_actions.user_id as user_id_left,
       users.user_id as user_id_right,
       order_id,
       time,
       action,
       sex,
       birth_date
FROM   user_actions
    LEFT JOIN users using(user_id)
WHERE  users.user_id is not null
ORDER BY user_actions.user_id ;

----------------------------------------------------------------------------------------
Для начала объедините таблицы user_actions и orders. В качестве ключа используйте поле order_id. 
Выведите id пользователей и заказов, а также список товаров в заказе. 
Отсортируйте таблицу по id пользователя по возрастанию, затем по id заказа — тоже по возрастанию.
Добавьте в запрос оператор LIMIT и выведите только первые 1000 строк результирующей таблицы.
Поля в результирующей таблице: user_id, order_id, product_ids

SELECT user_id,
       order_id,
       product_ids
FROM   user_actions
    LEFT JOIN orders using(order_id)
ORDER BY user_id, order_id limit 1000 ;

----------------------------------------------------------------------------------------
Объедините таблицы user_actions и orders, но теперь оставьте только уникальные неотменённые заказы. 
Остальные условия задачи те же: вывести id пользователей и заказов, а также список товаров в заказе. 
Отсортируйте таблицу по id пользователя по возрастанию, затем по id заказа — тоже по возрастанию.
Добавьте в запрос оператор LIMIT и выведите только первые 1000 строк результирующей таблицы.
Поля в результирующей таблице: user_id, order_id, product_ids

WITH t3 AS(
    SELECT order_id
    FROM user_actions
    WHERE action = 'cancel_order'
)
SELECT t1.user_id, t1.order_id, t2.product_ids
FROM user_actions t1
    LEFT JOIN orders t2
USING(order_id)
WHERE t1.order_id NOT IN (SELECT * FROM t3)
ORDER BY user_id, order_id
LIMIT 1000 ;

----------------------------------------------------------------------------------------
Посчитайте, сколько в среднем товаров заказывает каждый пользователь. 
Выведите id пользователя и среднее количество товаров в заказе. 
Среднее значение округлите до двух знаков после запятой. 
Колонку посчитанными значениями назовите avg_order_size. 
Результат выполнения запроса отсортируйте по возрастанию id пользователя. 
Добавьте в запрос оператор LIMIT и выведите только первые 1000 строк результирующей таблицы.
Поля в результирующей таблице: user_id, avg_order_size

WITH t3 AS(
   SELECT order_id
   FROM   user_actions
   WHERE  action = 'cancel_order'
)
SELECT t1.user_id, ROUND(AVG(ARRAY_LENGTH(product_ids, 1)), 2) AS avg_order_size
FROM   user_actions t1
    LEFT JOIN orders t2 
    USING(order_id)
WHERE  t1.order_id not in (SELECT * FROM   t3)
GROUP BY t1.user_id
ORDER BY user_id
LIMIT 1000 ;

----------------------------------------------------------------------------------------
 К таблице с заказами примените функцию unnest. Колонку с id товаров назовите product_id. 
Затем к образовавшейся расширенной таблице по ключу product_id добавьте информацию о ценах на товары (из таблицы products). 
Должна получиться таблица с заказами, товарами внутри каждого заказа и ценами на эти товары. 
Выведите колонки с id заказа, id товара и ценой товара. Результат отсортируйте сначала по возрастанию id заказа, затем по возрастанию id товара.
Добавьте в запрос оператор LIMIT и выведите только первые 1000 строк результирующей таблицы.
Поля в результирующей таблице: order_id, product_id, price

SELECT order_id,
       product_id,
       price
FROM   (SELECT order_id,
               unnest(product_ids) as product_id
        FROM   orders) as t1
    LEFT JOIN products as t2 using(product_id)
ORDER BY order_id, product_id limit 1000 ;

----------------------------------------------------------------------------------------
Рассчитайте суммарную стоимость каждого заказа. 
Выведите колонки с id заказов и их стоимостью. 
Колонку со стоимостью заказа назовите order_price. 
Результат отсортируйте по возрастанию id заказа.
Добавьте в запрос оператор LIMIT и выведите только первые 1000 строк результирующей таблицы.
Поля в результирующей таблице: order_id, order_price

WITH ct1 AS(
SELECT order_id, product_id, price
FROM (SELECT order_id, UNNEST(product_ids) AS product_id FROM orders) AS t1
    LEFT JOIN products AS t2
    USING(product_id)
)
SELECT order_id, SUM(price) AS order_price
FROM ct1
GROUP BY order_id
ORDER BY order_id
LIMIT 1000 ;

----------------------------------------------------------------------------------------
Для каждого пользователя рассчитайте следующие показатели:

общее число заказов — колонку назовите orders_count
среднее количество товаров в заказе — avg_order_size
суммарную стоимость всех покупок — sum_order_value
среднюю стоимость заказа — avg_order_value
минимальную стоимость заказа — min_order_value
максимальную стоимость заказа — max_order_value
Полученный результат отсортируйте по возрастанию id пользователя.

Добавьте в запрос оператор LIMIT и выведите только первые 1000 строк результирующей таблицы.
Помните, что в расчётах мы по-прежнему учитываем только неотменённые заказы. 
При расчёте средних значений, округляйте их до двух знаков после запятой.

Поля в результирующей таблице: 
user_id, orders_count, avg_order_size, sum_order_value, avg_order_value, min_order_value, max_order_value

WITH cancel_orders as(
    SELECT order_id
    FROM   user_actions
    WHERE  action = 'cancel_order'),
ct1 AS(
SELECT order_id, product_id, price
FROM (SELECT order_id, UNNEST(product_ids) AS product_id FROM orders  WHERE order_id NOT IN (SELECT * FROM cancel_orders)) AS t1
    LEFT JOIN products AS t2
    USING(product_id)
)
SELECT user_id, 
	orders_count, 
	avg_order_size, 
	sum_order_value, 
	ROUND((sum_order_value / orders_count), 2) AS avg_order_value, 
	min_order_value, 
	max_order_value
FROM 
    (SELECT user_id, COUNT(order_id) AS orders_count
    FROM user_actions
    WHERE order_id NOT IN (SELECT * FROM cancel_orders)
    GROUP BY user_id) a
LEFT JOIN 
    (SELECT user_id, round(avg(array_length(product_ids, 1)), 2) as avg_order_size
    FROM   user_actions t1
    LEFT JOIN orders t2 
    USING(order_id)
    WHERE  t1.order_id not in (SELECT * FROM   cancel_orders)
    GROUP BY t1.user_id
    ) b
USING(user_id)
LEFT JOIN(
    SELECT user_id, SUM(order_price) AS sum_order_value, MIN(order_price) AS min_order_value, MAX(order_price) AS max_order_value
    FROM (
     	   SELECT user_id, order_price
        FROM user_actions c
        LEFT JOIN
        (SELECT order_id, SUM(price) AS order_price
        FROM ct1
        GROUP BY order_id) d
    USING(order_id)) t7
    GROUP BY user_id) t8
USING(user_id)
ORDER BY user_id
LIMIT 1000 ;

----------------------------------------------------------------------------------------
По таблицам courier_actions , orders и products определите 10 самых популярных товаров, доставленных в сентябре 2022 года. 
Самыми популярными товарами будем считать те, которые встречались в заказах чаще всего. 
Если товар встречается в одном заказе несколько раз (было куплено несколько единиц товара), то при подсчёте учитываем только одну единицу товара. 
Выведите наименования товаров и сколько раз они встречались в заказах. Новую колонку с количеством покупок товара назовите times_purchased. 
Поля в результирующей таблице: name, times_purchased

WITH ct1 AS(
SELECT order_id, UNNEST(product_ids) AS product_id
FROM orders
),
ct2 AS(
SELECT order_id
FROM courier_actions
WHERE action = 'deliver_order' AND DATE_PART('month', time) = 9 AND DATE_PART('year', time) = 2022
),
ct3 AS(
SELECT DISTINCT order_id, product_id, name
FROM ct1
LEFT JOIN products
USING(product_id)
WHERE order_id IN (SELECT * FROM ct2)
)
SELECT name, COUNT(product_id) AS times_purchased
FROM ct3
GROUP BY name
ORDER BY times_purchased DESC
LIMIT 10 ;

----------------------------------------------------------------------------------------