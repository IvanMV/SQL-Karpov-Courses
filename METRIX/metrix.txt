REDASH: http://redash.public.karpov.courses/public/dashboards/uFWV3qEplm2WNclt1etqNgLs13RoTnu7HCdWdemt?org_slug=default
-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------
Для каждого дня, представленного в таблицах user_actions и courier_actions, рассчитайте следующие показатели:
	Число новых пользователей.
	Число новых курьеров.
	Общее число пользователей на текущий день.
	Общее число курьеров на текущий день.
Колонки с показателями назовите соответственно new_users, new_couriers, total_users, total_couriers. 
Колонку с датами назовите date. Проследите за тем, чтобы показатели были выражены целыми числами. 
Результат должен быть отсортирован по возрастанию даты.
Поля в результирующей таблице: date, new_users, new_couriers, total_users, total_couriers

WITH users AS(
SELECT date, COUNT(user_id) AS new_users
FROM (
    SELECT user_id, DATE(MIN(time)) AS date
    FROM user_actions
    GROUP BY user_id
    ) t1
GROUP BY date
),
couriers AS(
SELECT date, COUNT(courier_id) AS new_couriers
FROM (
    SELECT courier_id, DATE(MIN(time)) AS date
    FROM courier_actions
    GROUP BY courier_id
    ) t2
GROUP BY date
)
SELECT 
	date, 
	new_users, 
	new_couriers, 
	(SUM(new_users) OVER(ORDER BY date))::INTEGER AS total_users, 
	(SUM(new_couriers) OVER(ORDER BY date))::INTEGER AS total_couriers
FROM users
FULL JOIN couriers
USING(date)
ORDER BY date

-----------------------------------------------------------------------------------------------------------------------------------
WITH users AS(
SELECT date, COUNT(user_id) AS new_users
FROM (
    SELECT user_id, DATE(MIN(time)) AS date
    FROM user_actions
    GROUP BY user_id
    ) t1
GROUP BY date
),
couriers AS(
SELECT date, COUNT(courier_id) AS new_couriers
FROM (
    SELECT courier_id, DATE(MIN(time)) AS date
    FROM courier_actions
    GROUP BY courier_id
    ) t2
GROUP BY date
),
ct1 AS(
SELECT 
date, 
    new_users, 
    new_couriers, 
    (SUM(new_users) OVER(ORDER BY date))::INTEGER AS total_users, 
    (SUM(new_couriers) OVER(ORDER BY date))::INTEGER AS total_couriers
FROM users
FULL JOIN couriers
USING(date)
ORDER BY date
)
SELECT 
    date,
    new_users,
    new_couriers,
    total_users,
    total_couriers,
    ROUND((new_users::DECIMAL / LAG(new_users) OVER(ORDER BY date) * 100 - 100), 2) AS new_users_change,
    ROUND((new_couriers::DECIMAL / LAG(new_couriers) OVER(ORDER BY date) * 100 - 100), 2) AS new_couriers_change,
    ROUND((total_users::DECIMAL / LAG(total_users) OVER(ORDER BY date) * 100 - 100), 2) AS total_users_growth,
    ROUND((total_couriers::DECIMAL / LAG(total_couriers) OVER(ORDER BY date) * 100 - 100), 2) AS total_couriers_growth
FROM ct1

-----------------------------------------------------------------------------------------------------------------------------------
Для каждого дня, представленного в таблице user_actions, рассчитайте следующие показатели:

Долю пользователей, сделавших в этот день всего один заказ, в общем количестве платящих пользователей.
Долю пользователей, сделавших в этот день несколько заказов, в общем количестве платящих пользователей.
Колонки с показателями назовите соответственно single_order_users_share, several_orders_users_share. 
Колонку с датами назовите date. Все показатели с долями необходимо выразить в процентах. 
При расчёте долей округляйте значения до двух знаков после запятой.
Результат должен быть отсортирован по возрастанию даты.
Поля в результирующей таблице: date, single_order_users_share, several_orders_users_share
Пояснение: 
Платящими  считаем тех пользователей, которые в данный день оформили (и не отменили) хотя бы один заказ.

SELECT 
    date, 
    ROUND((COUNT(payments) FILTER(WHERE payments = 1) / total::DECIMAL * 100), 2) AS single_order_users_share,
    ROUND((COUNT(payments) FILTER(WHERE payments > 1) / total::DECIMAL * 100), 2) AS several_orders_users_share
FROM (
    SELECT user_id, COUNT(user_id) AS payments, DATE(time) AS date, COUNT(user_id) OVER(PARTITION BY DATE(time)) AS total
    FROM user_actions
    WHERE order_id NOT IN (
        SELECT order_id
        FROM user_actions
        WHERE action = 'cancel_order' )
    GROUP BY date, user_id
    ORDER BY date
    ) t1
GROUP BY date, total
ORDER BY date

-----------------------------------------------------------------------------------------------------------------------------------
Для каждого дня, представленного в таблице user_actions, рассчитайте следующие показатели:

Общее число заказов.
Число первых заказов (заказов, сделанных пользователями впервые).
Число заказов новых пользователей (заказов, сделанных пользователями в тот же день, когда они впервые воспользовались сервисом).
Долю первых заказов в общем числе заказов (долю п.2 в п.1).
Долю заказов новых пользователей в общем числе заказов (долю п.3 в п.1).
Колонки с показателями назовите соответственно orders, first_orders, new_users_orders, first_orders_share, new_users_orders_share. 
Колонку с датами назовите date. Проследите за тем, чтобы во всех случаях количество заказов было выражено целым числом. 
Все показатели с долями необходимо выразить в процентах. При расчёте долей округляйте значения до двух знаков после запятой.

Результат должен быть отсортирован по возрастанию даты.

Поля в результирующей таблице: date, orders, first_orders, new_users_orders, first_orders_share, new_users_orders_share

Пояснение: 

При расчёте числа первых заказов учитывайте, что у каждого пользователя может быть всего один первый заказ (что вполне логично).
При расчёте числа заказов новых пользователей учитывайте, что в свой первый день каждый новый пользователь мог как совершить сразу несколько заказов, так и не совершить ни одного.
Во всех случаях при расчёте числа заказов учитывайте только фактически совершённые заказы, отменённые заказы не учитывайте.

WITH new_orders AS(
SELECT COUNT(user_id) AS first_orders, date
FROM (
    SELECT user_id, MIN(DATE(time)) AS date
    FROM user_actions
    WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
    GROUP BY user_id
    ) t1
GROUP BY date
),
total_orders AS(
SELECT DATE(time) AS date, COUNT(order_id) AS orders
FROM user_actions 
WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
GROUP BY date
ORDER BY date
),
new_users AS(
SELECT date, COUNT(order_id) AS new_users_orders
FROM (
    SELECT t2.date, t3.order_id
    FROM (
        SELECT user_id, MIN(DATE(time)) AS date
        FROM user_actions
        GROUP BY user_id
        ORDER BY user_id
        ) t2
    LEFT JOIN 
        (
        SELECT user_id, order_id, DATE(time) AS date 
        FROM user_actions
        WHERE action = 'create_order' AND order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
        ) t3
    ON t2.user_id = t3.user_id AND t2.date = t3.date
    
    ORDER BY date
    ) t4
GROUP BY date
)
SELECT date, orders, first_orders, new_users_orders, ROUND((first_orders::DECIMAL / orders * 100), 2) AS first_orders_share, ROUND((new_users_orders::DECIMAL / orders * 100), 2) AS new_users_orders_share
FROM new_orders 
LEFT JOIN total_orders USING(date)
LEFT JOIN new_users USING(date)

-----------------------------------------------------------------------------------------------------------------------------------
На основе данных в таблицах user_actions, courier_actions и orders для каждого дня рассчитайте следующие показатели:

Число платящих пользователей на одного активного курьера.
Число заказов на одного активного курьера.
Колонки с показателями назовите соответственно users_per_courier и orders_per_courier. 
Колонку с датами назовите date. При расчёте показателей округляйте значения до двух знаков после запятой.

Результирующая таблица должна быть отсортирована по возрастанию даты.

Поля в результирующей таблице: date, users_per_courier, orders_per_courier

Пояснение:
Платящими по-прежнему считаем тех пользователей, которые в данный день оформили хотя бы один заказ, который в дальнейшем не был отменен.
Курьеров считаем активными, если в данный день они приняли хотя бы один заказ, который был доставлен (возможно, уже на следующий день), или доставили любой заказ.
В расчётах учитывайте только неотменённые заказы. 

SELECT date, ROUND((paying_users::DECIMAL / active_couriers), 2) AS users_per_courier, ROUND((orders::DECIMAL / active_couriers), 2) AS orders_per_courier
FROM (
    SELECT COUNT(DISTINCT user_id) AS paying_users, DATE(time) AS date
    FROM user_actions
    WHERE action = 'create_order' AND order_id NOT IN (SELECT order_id From user_actions WHERE action = 'cancel_order')
    GROUP BY date
    ) t1
LEFT JOIN 
    (
    SELECT COUNT(DISTINCT courier_id) AS active_couriers, DATE(time) AS date
    FROM courier_actions
    WHERE order_id NOT IN (SELECT order_id From user_actions WHERE action = 'cancel_order')
    GROUP BY date
    ) t2
USING(date)
LEFT JOIN
    (
    SELECT COUNT(order_id) AS orders, DATE(creation_time) AS date
    FROM orders
    WHERE order_id NOT IN (SELECT order_id From user_actions WHERE action = 'cancel_order')
    GROUP BY date
    ) t3
USING(date)
ORDER BY date

-----------------------------------------------------------------------------------------------------------------------------------
