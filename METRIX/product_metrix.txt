-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
http://redash.public.karpov.courses/public/dashboards/kNzcFQCXBz6Ya4PnyLzZl2vqdFJPAZefFjHWh8vi?org_slug=default
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
Для каждого дня в таблице orders рассчитайте следующие показатели:

Выручку, полученную в этот день.
Суммарную выручку на текущий день.
Прирост выручки, полученной в этот день, относительно значения выручки за предыдущий день.
Колонки с показателями назовите соответственно revenue, total_revenue, revenue_change. Колонку с датами назовите date.

Прирост выручки рассчитайте в процентах и округлите значения до двух знаков после запятой.
Результат должен быть отсортирован по возрастанию даты.
Поля в результирующей таблице: date, revenue, total_revenue, revenue_change

SELECT 
	date, 
	revenue, 
	SUM(revenue) OVER(ROWS UNBOUNDED PRECEDING) AS total_revenue, 
	ROUND((revenue / LAG(revenue) OVER() * 100 - 100), 2) AS revenue_change
FROM (
    SELECT date, SUM(price) AS revenue
    FROM (
        SELECT DATE(creation_time) AS DATE, UNNEST(product_ids) AS product_id
        FROM orders
        WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
        ) t1
    LEFT JOIN products USING(product_id)
    GROUP BY date
    ORDER BY date
    ) t2 ;

-----------------------------------------------------------------------------------------------------------------------------
Для каждого дня в таблицах orders и user_actions рассчитайте следующие показатели:

Выручку на пользователя (ARPU) за текущий день.
Выручку на платящего пользователя (ARPPU) за текущий день.
Выручку с заказа, или средний чек (AOV) за текущий день.
Колонки с показателями назовите соответственно arpu, arppu, aov. Колонку с датами назовите date. 

При расчёте всех показателей округляйте значения до двух знаков после запятой.
Результат должен быть отсортирован по возрастанию даты. 
Поля в результирующей таблице: date, arpu, arppu, aov

Пояснение: 
Будем считать, что оплата за заказ поступает сразу же после его оформления, т.е. случаи, когда заказ был оформлен в один день, 
а оплата получена на следующий, возникнуть не могут.
Платящими будем считать тех пользователей, которые в данный день оформили хотя бы один заказ, который в дальнейшем не был отменен.
При расчёте выручки помните, что не все заказы были оплачены — некоторые были отменены пользователями.

SELECT 
    date, 
    ROUND((daily_revenue::DECIMAL / users), 2) AS arpu,
    ROUND((daily_revenue::DECIMAL / pay_user), 2) AS arppu,
    ROUND((daily_revenue::DECIMAL / total_orders), 2) AS aov
FROM (
    SELECT date, SUM(price) AS daily_revenue
    FROM (
        SELECT DATE(creation_time) AS date, UNNEST(product_ids) AS product_id
        FROM orders
        WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
        ) t1
    LEFT JOIN products USING(product_id)
    GROUP BY date
    ) t2
LEFT JOIN (
    SELECT 
        COUNT(DISTINCT user_id) AS users, 
        COUNT(DISTINCT user_id) FILTER(WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')) AS pay_user, 
        COUNT(order_id) FILTER(WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')) AS total_orders, 
        DATE(time) AS date
    FROM user_actions
    GROUP BY date
    ) t3 
USING(date)
ORDER BY date

-----------------------------------------------------------------------------------------------------------------------------
По таблицам orders и user_actions для каждого дня рассчитайте следующие показатели:

Накопленную выручку на пользователя (Running ARPU).
Накопленную выручку на платящего пользователя (Running ARPPU).
Накопленную выручку с заказа, или средний чек (Running AOV).
Колонки с показателями назовите соответственно running_arpu, running_arppu, running_aov. Колонку с датами назовите date. 

При расчёте всех показателей округляйте значения до двух знаков после запятой.
Результат должен быть отсортирован по возрастанию даты. 
Поля в результирующей таблице: date, running_arpu, running_arppu, running_aov
Пояснение: 
При расчёте числа пользователей и платящих пользователей на текущую дату учитывайте соответствующих пользователей за все предыдущие дни, включая текущий.
Платящими будем считать тех пользователей, которые на текущий день оформили хотя бы один заказ, который в дальнейшем не был отменен.
Будем считать, что оплата за заказ поступает сразу же после его оформления, т.е. случаи, когда заказ был оформлен в один день, 
а оплата получена на следующий, возникнуть не могут.
При расчёте выручки помните, что не все заказы были оплачены — некоторые были отменены пользователями.

SELECT 
    date, 
    ROUND((daily_revenue::DECIMAL / users), 2) AS running_arpu,
    ROUND((daily_revenue::DECIMAL / pay_user), 2) AS running_arppu,
    ROUND((daily_revenue::DECIMAL / total_orders), 2) AS running_aov
FROM (
    SELECT date, SUM(daily_revenue) OVER(ORDER BY date) AS daily_revenue
    FROM (
        SELECT date, SUM(price) AS daily_revenue
        FROM (
            SELECT DATE(creation_time) AS date, UNNEST(product_ids) AS product_id
            FROM orders
            WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
            ) t1
        LEFT JOIN products USING(product_id)
        GROUP BY date
        ) t4
    ) t2
LEFT JOIN (
    SELECT 
        SUM(total_orders) OVER(ORDER BY date) AS total_orders,
        date
    FROM (
        SELECT 
            COUNT(order_id) FILTER(WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')) AS total_orders, 
            DATE(time) AS date
        FROM user_actions
        GROUP BY date
    ) t5
    ) t3 
USING(date)
LEFT JOIN (
    SELECT date, SUM(users) OVER(ORDER BY date) AS users
    FROM (
        SELECT date, COUNT(user_id) AS users
        FROM (
            SELECT user_id, DATE(MIN(time)) AS date
            FROM user_actions
            GROUP BY user_id
            ) u1
    GROUP BY date
    ) u2
    ) t6
USING(date)
LEFT JOIN (
    SELECT date, SUM(pay_user) OVER(ORDER BY date) AS pay_user
    FROM (
        SELECT date, COUNT(user_id) AS pay_user
        FROM (
            SELECT user_id, DATE(MIN(time)) AS date
            FROM user_actions
            WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
            GROUP BY user_id
            ) p1
    GROUP BY date
    ) p2
    ) t7
USING(date)
ORDER BY date ;

-----------------------------------------------------------------------------------------------------------------------------

Для каждого товара, представленного в таблице products, за весь период времени в таблице orders рассчитайте следующие показатели:

Суммарную выручку, полученную от продажи этого товара за весь период.
Долю выручки от продажи этого товара в общей выручке, полученной за весь период.
Колонки с показателями назовите соответственно revenue и share_in_revenue. Колонку с наименованиями товаров назовите product_name.

Долю выручки с каждого товара необходимо выразить в процентах. При её расчёте округляйте значения до двух знаков после запятой.
Товары, округлённая доля которых в выручке составляет менее 0.5%, объедините в общую группу с названием «ДРУГОЕ» (без кавычек), просуммировав округлённые доли этих товаров.
Результат должен быть отсортирован по убыванию выручки от продажи товара.
Поля в результирующей таблице: product_name, revenue, share_in_revenue

WITH prices AS(
SELECT name, t1.product_id, price
FROM (
    SELECT UNNEST(product_ids) AS product_id
    FROM orders
    WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
) t1
JOIN products USING(product_id)
),
t2 AS(
SELECT name AS product, SUM(price) AS revenue, ROUND((SUM(price) / (SELECT SUM(price) FROM prices) * 100), 2) AS share_in_revenue
FROM prices
GROUP BY name
)
SELECT 
    CASE
    WHEN share_in_revenue < 0.5 THEN 'ДРУГОЕ'
    ELSE product
    END AS product_name,
    SUM(revenue) AS revenue, SUM(share_in_revenue) AS share_in_revenue
FROM t2
GROUP BY product_name
ORDER BY revenue DESC

-----------------------------------------------------------------------------------------------------------------------------
Для каждого дня в таблицах orders и courier_actions рассчитайте следующие показатели:

Выручку, полученную в этот день.
Затраты, образовавшиеся в этот день.
Сумму НДС с продажи товаров в этот день.
Валовую прибыль в этот день (выручка за вычетом затрат и НДС).
Суммарную выручку на текущий день.
Суммарные затраты на текущий день.
Суммарный НДС на текущий день.
Суммарную валовую прибыль на текущий день.
Долю валовой прибыли в выручке за этот день (долю п.4 в п.1).
Долю суммарной валовой прибыли в суммарной выручке на текущий день (долю п.8 в п.5).
Колонки с показателями назовите соответственно revenue, costs, tax, gross_profit, total_revenue, total_costs, total_tax, total_gross_profit, gross_profit_ratio, total_gross_profit_ratio

Колонку с датами назовите date.
Долю валовой прибыли в выручке необходимо выразить в процентах, округлив значения до двух знаков после запятой.
Результат должен быть отсортирован по возрастанию даты.
Поля в результирующей таблице: date, revenue, costs, tax, gross_profit, total_revenue, total_costs, total_tax, total_gross_profit, gross_profit_ratio,total_gross_profit_ratio
Чтобы посчитать затраты, в этой задаче введём дополнительные условия.
В упрощённом виде затраты нашего сервиса будем считать как сумму постоянных и переменных издержек. К постоянным издержкам отнесём аренду складских помещений, а к переменным — стоимость сборки и доставки заказа. Таким образом, переменные затраты будут напрямую зависеть от числа заказов.
Из данных, которые нам предоставил финансовый отдел, известно, что в августе 2022 года постоянные затраты составляли 120 000 рублей в день. Однако уже в сентябре нашему сервису потребовались дополнительные помещения, и поэтому постоянные затраты возросли до 150 000 рублей в день.
Также известно, что в августе 2022 года сборка одного заказа обходилась нам в 140 рублей, при этом курьерам мы платили по 150 рублей за один доставленный заказ и ещё 400 рублей ежедневно в качестве бонуса, если курьер доставлял не менее 5 заказов в день. В сентябре продакт-менеджерам удалось снизить затраты на сборку заказа до 115 рублей, но при этом пришлось повысить бонусную выплату за доставку 5 и более заказов до 500 рублей, чтобы обеспечить более конкурентоспособные условия труда. При этом в сентябре выплата курьерам за один доставленный заказ осталась неизменной.

Пояснение: 

При расчёте переменных затрат учитывайте следующие условия:
1. Затраты на сборку учитываются в том же дне, когда был оформлен заказ. Сборка отменённых заказов не производится.
2. Выплата курьерам за доставленный заказ начисляется сразу же после его доставки, поэтому если курьер доставит заказ 
на следующий день, то и выплата будет учтена в следующем дне.
3. Для получения бонусной выплаты курьерам необходимо доставить не менее 5 заказов в течение одного дня, поэтому если 
курьер примет 5 заказов в течение дня, но последний из них доставит после полуночи, бонусную выплату он не получит.

При расчёте НДС учитывайте, что для некоторых товаров налог составляет 10%, а не 20%. Список товаров со сниженным НДС:

'сахар', 'сухарики', 'сушки', 'семечки', 
'масло льняное', 'виноград', 'масло оливковое', 
'арбуз', 'батон', 'йогурт', 'сливки', 'гречка', 
'овсянка', 'макароны', 'баранина', 'апельсины', 
'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая', 
'мука', 'шпроты', 'сосиски', 'свинина', 'рис', 
'масло кунжутное', 'сгущенка', 'ананас', 'говядина', 
'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки', 
'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли', 'мандарины'

Также при расчёте величины НДС по каждому товару округляйте значения до двух знаков после запятой.
При расчёте выручки по-прежнему будем считать, что оплата за заказ поступает сразу же после его оформления, т.е. 
случаи, когда заказ был оформлен в один день, а оплата получена на следующий, возникнуть не могут.
Также помните, что не все заказы были оплачены — некоторые были отменены пользователями.

WITH assembly AS(
    SELECT date, SUM(assembly_costs) AS assembly_costs_total
    FROM (
        SELECT order_id, DATE(creation_time) AS date, CASE WHEN DATE(creation_time) < '2022-09-01' THEN 140 ELSE 115 END AS assembly_costs
        FROM orders
        WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
        ) c1
    GROUP BY date
),
couriers AS(
SELECT date, (SUM(delivery_costs) + SUM(bonus_costs)) AS courier_costs
FROM (
    SELECT date, courier_id, COUNT(order_id) AS delivered_orders, COUNT(order_id) * 150 AS delivery_costs,
        CASE WHEN date < '2022-09-01' AND COUNT(order_id) > 4 THEN 400
        WHEN date >= '2022-09-01' AND COUNT(order_id) > 4 THEN 500
        ELSE 0
        END AS bonus_costs
    FROM (
        SELECT DATE(time) as date, courier_id, order_id
        FROM courier_actions
        WHERE action = 'deliver_order'
        ) c2
    GROUP BY date, courier_id
    ) c3
GROUP BY date
),
variable AS(
    SELECT date, (courier_costs + assembly_costs_total) AS variable_costs
    FROM assembly
    JOIN couriers USING(date)
),

rev_tax_fix AS(
SELECT date, SUM(price) AS revenue, SUM(tax) AS tax, CASE WHEN date < '2022-09-01' THEN 120000 ELSE 150000 END AS fixed_costs
FROM (
    SELECT date, price, name, 
        CASE WHEN name IN ('сахар', 'сухарики', 'сушки', 'семечки', 
'масло льняное', 'виноград', 'масло оливковое', 
'арбуз', 'батон', 'йогурт', 'сливки', 'гречка', 
'овсянка', 'макароны', 'баранина', 'апельсины', 
'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая', 
'мука', 'шпроты', 'сосиски', 'свинина', 'рис', 
'масло кунжутное', 'сгущенка', 'ананас', 'говядина', 
'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки', 
'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли', 'мандарины') THEN ROUND(price::DECIMAL*10/110, 2)
        ELSE ROUND(price::DECIMAL*20/120, 2)
        END AS tax
    FROM (
        SELECT order_id, DATE(creation_time) AS date, UNNEST(product_ids) AS product_id
        FROM orders
        WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
        ) t1
    JOIN products USING(product_id)
    ) t2
GROUP BY date
),
data AS(
    SELECT date, revenue, (fixed_costs + variable_costs) AS costs, tax
    FROM variable
    JOIN rev_tax_fix USING(date)
)
SELECT date, revenue, costs, tax, (revenue - costs - tax) AS gross_profit, SUM(revenue) OVER(ORDER BY date) AS total_revenue,
    SUM(costs) OVER(ORDER BY date) AS total_costs, SUM(tax) OVER(ORDER BY date) AS total_tax,
    SUM((revenue - costs - tax)) OVER(ORDER BY date) AS total_gross_profit,
    ROUND(((revenue - costs - tax) / revenue * 100) ,2) AS gross_profit_ratio,
    ROUND((SUM((revenue - costs - tax)) OVER(ORDER BY date) / SUM(revenue) OVER(ORDER BY date) * 100), 2) AS total_gross_profit_ratio
FROM data
ORDER BY date

-----------------------------------------------------------------------------------------------------------------------------