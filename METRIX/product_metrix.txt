-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
http://redash.public.karpov.courses/public/dashboards/kNzcFQCXBz6Ya4PnyLzZl2vqdFJPAZefFjHWh8vi?org_slug=default
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
Для каждого дня в таблице orders рассчитайте следующие показатели:

Выручку, полученную в этот день.
Суммарную выручку на текущий день.
Прирост выручки, полученной в этот день, относительно значения выручки за предыдущий день.
Колонки с показателями назовите соответственно revenue, total_revenue, revenue_change. Колонку с датами назовите date.

Прирост выручки рассчитайте в процентах и округлите значения до двух знаков после запятой.
Результат должен быть отсортирован по возрастанию даты.
Поля в результирующей таблице: date, revenue, total_revenue, revenue_change

SELECT 
	date, 
	revenue, 
	SUM(revenue) OVER(ROWS UNBOUNDED PRECEDING) AS total_revenue, 
	ROUND((revenue / LAG(revenue) OVER() * 100 - 100), 2) AS revenue_change
FROM (
    SELECT date, SUM(price) AS revenue
    FROM (
        SELECT DATE(creation_time) AS DATE, UNNEST(product_ids) AS product_id
        FROM orders
        WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
        ) t1
    LEFT JOIN products USING(product_id)
    GROUP BY date
    ORDER BY date
    ) t2 ;

-----------------------------------------------------------------------------------------------------------------------------
Для каждого дня в таблицах orders и user_actions рассчитайте следующие показатели:

Выручку на пользователя (ARPU) за текущий день.
Выручку на платящего пользователя (ARPPU) за текущий день.
Выручку с заказа, или средний чек (AOV) за текущий день.
Колонки с показателями назовите соответственно arpu, arppu, aov. Колонку с датами назовите date. 

При расчёте всех показателей округляйте значения до двух знаков после запятой.
Результат должен быть отсортирован по возрастанию даты. 
Поля в результирующей таблице: date, arpu, arppu, aov

Пояснение: 
Будем считать, что оплата за заказ поступает сразу же после его оформления, т.е. случаи, когда заказ был оформлен в один день, 
а оплата получена на следующий, возникнуть не могут.
Платящими будем считать тех пользователей, которые в данный день оформили хотя бы один заказ, который в дальнейшем не был отменен.
При расчёте выручки помните, что не все заказы были оплачены — некоторые были отменены пользователями.

SELECT 
    date, 
    ROUND((daily_revenue::DECIMAL / users), 2) AS arpu,
    ROUND((daily_revenue::DECIMAL / pay_user), 2) AS arppu,
    ROUND((daily_revenue::DECIMAL / total_orders), 2) AS aov
FROM (
    SELECT date, SUM(price) AS daily_revenue
    FROM (
        SELECT DATE(creation_time) AS date, UNNEST(product_ids) AS product_id
        FROM orders
        WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
        ) t1
    LEFT JOIN products USING(product_id)
    GROUP BY date
    ) t2
LEFT JOIN (
    SELECT 
        COUNT(DISTINCT user_id) AS users, 
        COUNT(DISTINCT user_id) FILTER(WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')) AS pay_user, 
        COUNT(order_id) FILTER(WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')) AS total_orders, 
        DATE(time) AS date
    FROM user_actions
    GROUP BY date
    ) t3 
USING(date)
ORDER BY date

-----------------------------------------------------------------------------------------------------------------------------
По таблицам orders и user_actions для каждого дня рассчитайте следующие показатели:

Накопленную выручку на пользователя (Running ARPU).
Накопленную выручку на платящего пользователя (Running ARPPU).
Накопленную выручку с заказа, или средний чек (Running AOV).
Колонки с показателями назовите соответственно running_arpu, running_arppu, running_aov. Колонку с датами назовите date. 

При расчёте всех показателей округляйте значения до двух знаков после запятой.
Результат должен быть отсортирован по возрастанию даты. 
Поля в результирующей таблице: date, running_arpu, running_arppu, running_aov
Пояснение: 
При расчёте числа пользователей и платящих пользователей на текущую дату учитывайте соответствующих пользователей за все предыдущие дни, включая текущий.
Платящими будем считать тех пользователей, которые на текущий день оформили хотя бы один заказ, который в дальнейшем не был отменен.
Будем считать, что оплата за заказ поступает сразу же после его оформления, т.е. случаи, когда заказ был оформлен в один день, 
а оплата получена на следующий, возникнуть не могут.
При расчёте выручки помните, что не все заказы были оплачены — некоторые были отменены пользователями.

SELECT 
    date, 
    ROUND((daily_revenue::DECIMAL / users), 2) AS running_arpu,
    ROUND((daily_revenue::DECIMAL / pay_user), 2) AS running_arppu,
    ROUND((daily_revenue::DECIMAL / total_orders), 2) AS running_aov
FROM (
    SELECT date, SUM(daily_revenue) OVER(ORDER BY date) AS daily_revenue
    FROM (
        SELECT date, SUM(price) AS daily_revenue
        FROM (
            SELECT DATE(creation_time) AS date, UNNEST(product_ids) AS product_id
            FROM orders
            WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
            ) t1
        LEFT JOIN products USING(product_id)
        GROUP BY date
        ) t4
    ) t2
LEFT JOIN (
    SELECT 
        SUM(total_orders) OVER(ORDER BY date) AS total_orders,
        date
    FROM (
        SELECT 
            COUNT(order_id) FILTER(WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')) AS total_orders, 
            DATE(time) AS date
        FROM user_actions
        GROUP BY date
    ) t5
    ) t3 
USING(date)
LEFT JOIN (
    SELECT date, SUM(users) OVER(ORDER BY date) AS users
    FROM (
        SELECT date, COUNT(user_id) AS users
        FROM (
            SELECT user_id, DATE(MIN(time)) AS date
            FROM user_actions
            GROUP BY user_id
            ) u1
    GROUP BY date
    ) u2
    ) t6
USING(date)
LEFT JOIN (
    SELECT date, SUM(pay_user) OVER(ORDER BY date) AS pay_user
    FROM (
        SELECT date, COUNT(user_id) AS pay_user
        FROM (
            SELECT user_id, DATE(MIN(time)) AS date
            FROM user_actions
            WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
            GROUP BY user_id
            ) p1
    GROUP BY date
    ) p2
    ) t7
USING(date)
ORDER BY date ;

-----------------------------------------------------------------------------------------------------------------------------
