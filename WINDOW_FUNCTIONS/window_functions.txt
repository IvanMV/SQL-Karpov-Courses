Примените оконные функции к таблице products и с помощью ранжирующих функций упорядочьте все товары по цене — от самых дорогих к самым дешёвым. 
Добавьте в таблицу следующие колонки:
Колонку product_number с порядковым номером товара (функция ROW_NUMBER).
Колонку product_rank с рангом товара с пропусками рангов (функция RANK).
Колонку product_dense_rank с рангом товара без пропусков рангов (функция DENSE_RANK).
Поля в результирующей таблице: product_id, name, price, product_number, product_rank, product_dense_rank

SELECT 
    product_id, 
    name, 
    price, 
    ROW_NUMBER() OVER(ORDER BY price DESC) AS product_number, 
    RANK() OVER(ORDER BY price DESC) AS product_rank, 
    DENSE_RANK() OVER(ORDER BY price DESC) AS product_dense_rank
FROM products ;

---------------------------------------------------------------------------------------------------------
Примените оконную функцию к таблице products и с помощью агрегирующей функции в отдельной колонке для каждой записи проставьте цену самого дорогого товара. 
Колонку с этим значением назовите max_price. 
Затем для каждого товара посчитайте долю его цены в стоимости самого дорогого товара — просто поделите одну колонку на другую. 
Полученные доли округлите до двух знаков после запятой. 
Колонку с долями назовите share_of_max.
Выведите всю информацию о товарах, включая значения в новых колонках. 
Результат отсортируйте сначала по убыванию цены товара, затем по возрастанию id товара.
Поля в результирующей таблице: product_id, name, price, max_price, share_of_max

SELECT
    product_id,
    name, 
    price,
    MAX(price) OVER() AS max_price,
    ROUND(price / MAX(price) OVER(), 2) AS share_of_max
FROM products
ORDER BY price DESC, product_id ;

---------------------------------------------------------------------------------------------------------
Примените две оконные функции к таблице products — одну с агрегирующей функцией MAX, 
а другую с агрегирующей функцией MIN — для вычисления максимальной и минимальной цены. 
Для двух окон задайте инструкцию ORDER BY по убыванию цены. 
Поместите результат вычислений в две колонки max_price и min_price.
Выведите всю информацию о товарах, включая значения в новых колонках. Результат отсортируйте сначала по убыванию цены товара, затем по возрастанию id товара.
Поля в результирующей таблице: product_id, name, price, max_price, min_price

SELECT 
    product_id,
    name,
    price,
    MAX(price) OVER(ORDER BY price DESC) AS max_price,
    MIN(price) OVER(ORDER BY price DESC) AS min_price
FROM
    products
ORDER BY
    price DESC,
    product_id ;

---------------------------------------------------------------------------------------------------------
Сначала на основе таблицы orders сформируйте новую таблицу с общим числом заказов по дням. 
При подсчёте числа заказов не учитывайте отменённые заказы. 
Колонку с днями назовите date, а колонку с числом заказов — orders_count.
Затем поместите полученную таблицу в подзапрос и примените к ней оконную функцию в паре с агрегирующей функцией SUM для расчёта накопительной суммы числа заказов.
Не забудьте для окна задать инструкцию ORDER BY по дате.
Колонку с накопительной суммой назовите orders_cum_count. 
В результате такой операции значение накопительной суммы для последнего дня должно получиться равным общему числу заказов за весь период.
Поля в результирующей таблице: date, orders_count, orders_cum_count

WITH cancelled AS(
SELECT order_id
FROM user_actions
WHERE action = 'cancel_order'
)
SELECT date, orders_count, (SUM(orders_count) OVER(ORDER BY date))::INTEGER AS orders_cum_count
FROM
    (
    SELECT DATE(creation_time) AS date, COUNT(order_id) AS orders_count
    FROM orders
    WHERE order_id NOT IN (SELECT * FROM cancelled)
    GROUP BY DATE(creation_time)
    ) t1

---------------------------------------------------------------------------------------------------------
