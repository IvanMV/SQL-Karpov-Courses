Примените оконные функции к таблице products и с помощью ранжирующих функций упорядочьте все товары по цене — от самых дорогих к самым дешёвым. 
Добавьте в таблицу следующие колонки:
Колонку product_number с порядковым номером товара (функция ROW_NUMBER).
Колонку product_rank с рангом товара с пропусками рангов (функция RANK).
Колонку product_dense_rank с рангом товара без пропусков рангов (функция DENSE_RANK).
Поля в результирующей таблице: product_id, name, price, product_number, product_rank, product_dense_rank

SELECT 
    product_id, 
    name, 
    price, 
    ROW_NUMBER() OVER(ORDER BY price DESC) AS product_number, 
    RANK() OVER(ORDER BY price DESC) AS product_rank, 
    DENSE_RANK() OVER(ORDER BY price DESC) AS product_dense_rank
FROM products ;

---------------------------------------------------------------------------------------------------------
Примените оконную функцию к таблице products и с помощью агрегирующей функции в отдельной колонке для каждой записи проставьте цену самого дорогого товара. 
Колонку с этим значением назовите max_price. 
Затем для каждого товара посчитайте долю его цены в стоимости самого дорогого товара — просто поделите одну колонку на другую. 
Полученные доли округлите до двух знаков после запятой. 
Колонку с долями назовите share_of_max.
Выведите всю информацию о товарах, включая значения в новых колонках. 
Результат отсортируйте сначала по убыванию цены товара, затем по возрастанию id товара.
Поля в результирующей таблице: product_id, name, price, max_price, share_of_max

SELECT
    product_id,
    name, 
    price,
    MAX(price) OVER() AS max_price,
    ROUND(price / MAX(price) OVER(), 2) AS share_of_max
FROM products
ORDER BY price DESC, product_id ;

---------------------------------------------------------------------------------------------------------
Примените две оконные функции к таблице products — одну с агрегирующей функцией MAX, 
а другую с агрегирующей функцией MIN — для вычисления максимальной и минимальной цены. 
Для двух окон задайте инструкцию ORDER BY по убыванию цены. 
Поместите результат вычислений в две колонки max_price и min_price.
Выведите всю информацию о товарах, включая значения в новых колонках. Результат отсортируйте сначала по убыванию цены товара, затем по возрастанию id товара.
Поля в результирующей таблице: product_id, name, price, max_price, min_price

SELECT 
    product_id,
    name,
    price,
    MAX(price) OVER(ORDER BY price DESC) AS max_price,
    MIN(price) OVER(ORDER BY price DESC) AS min_price
FROM
    products
ORDER BY
    price DESC,
    product_id ;

---------------------------------------------------------------------------------------------------------
Сначала на основе таблицы orders сформируйте новую таблицу с общим числом заказов по дням. 
При подсчёте числа заказов не учитывайте отменённые заказы. 
Колонку с днями назовите date, а колонку с числом заказов — orders_count.
Затем поместите полученную таблицу в подзапрос и примените к ней оконную функцию в паре с агрегирующей функцией SUM для расчёта накопительной суммы числа заказов.
Не забудьте для окна задать инструкцию ORDER BY по дате.
Колонку с накопительной суммой назовите orders_cum_count. 
В результате такой операции значение накопительной суммы для последнего дня должно получиться равным общему числу заказов за весь период.
Поля в результирующей таблице: date, orders_count, orders_cum_count

WITH cancelled AS(
SELECT order_id
FROM user_actions
WHERE action = 'cancel_order'
)
SELECT date, orders_count, (SUM(orders_count) OVER(ORDER BY date))::INTEGER AS orders_cum_count
FROM
    (
    SELECT DATE(creation_time) AS date, COUNT(order_id) AS orders_count
    FROM orders
    WHERE order_id NOT IN (SELECT * FROM cancelled)
    GROUP BY DATE(creation_time)
    ) t1

---------------------------------------------------------------------------------------------------------
Для каждого пользователя в таблице user_actions посчитайте порядковый номер каждого заказа. 
Для этого примените оконную функцию ROW_NUMBER к колонке с временем заказа. 
Не забудьте указать деление на партиции по пользователям и сортировку внутри партиций. 
Отменённые заказы не учитывайте. Новую колонку с порядковым номером заказа назовите order_number. 
Результат отсортируйте сначала по возрастанию id пользователя, затем по возрастанию order_number. 
Добавьте LIMIT 1000.
Поля в результирующей таблице: user_id, order_id, time, order_number

SELECT user_id, order_id, time, ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY time) AS order_number
FROM user_actions
WHERE order_id NOT IN (SELECT order_id From user_actions WHERE action = 'cancel_order')
ORDER BY user_id, order_number
LIMIT 1000 ;

---------------------------------------------------------------------------------------------------------
Для каждого пользователя рассчитайте, сколько в среднем времени проходит между его заказами. 
Посчитайте этот показатель только для тех пользователей, которые за всё время оформили более одного неотмененного заказа.
Среднее время между заказами выразите в часах, округлив значения до целого числа. 
Колонку со средним значением времени назовите hours_between_orders. 
Результат отсортируйте по возрастанию id пользователя.
Добавьте в запрос оператор LIMIT и включите в результат только первые 1000 записей.
Поля в результирующей таблице: user_id, hours_between_orders
В результате всех расчётов для каждого пользователя с более чем одним заказом у вас должно получиться целое число часов, 
которое в среднем проходит между его заказами.

WITH ct1 AS(
SELECT user_id,
       time - (LAG(time) OVER(PARTITION BY user_id ORDER BY time)) AS time_diff,
       COUNT(user_id) OVER(PARTITION BY user_id) AS total_orders
FROM   user_actions
WHERE  order_id not in (SELECT order_id
                        FROM   user_actions
                        WHERE  action = 'cancel_order')
)
SELECT user_id, ROUND(AVG(EXTRACT(epoch from time_diff))/3600)::INTEGER AS hours_between_orders
FROM ct1
WHERE total_orders > 1
GROUP BY user_id
ORDER BY user_id 
LIMIT 1000 ;

---------------------------------------------------------------------------------------------------------
Сначала на основе таблицы orders сформируйте новую таблицу с общим числом заказов по дням. 
При подсчёте числа заказов не учитывайте отменённые заказы (их можно определить по таблице user_actions).
Колонку с числом заказов назовите orders_count.
Затем поместите полученную таблицу в подзапрос и примените к ней оконную функцию в паре с агрегирующей функцией AVG для расчёта скользящего среднего числа заказов. Скользящее среднее для каждой записи считайте по трём предыдущим дням. Подумайте, как правильно задать границы рамки, чтобы получить корректные расчёты.
Полученные значения скользящего среднего округлите до двух знаков после запятой. 
Колонку с рассчитанным показателем назовите moving_avg. 
Поля в результирующей таблице: date, orders_count, moving_avg

WITH 
cancelled AS(
SELECT order_id
FROM user_actions
WHERE action = 'cancel_order'
),
total_orders AS(
SELECT DATE(creation_time) AS date, COUNT(order_id) AS orders_count
FROM orders
WHERE order_id NOT IN (SELECT * FROM cancelled)
GROUP BY DATE(creation_time)
)
SELECT date, orders_count, ROUND(AVG(orders_count) OVER(ORDER BY date ROWS BETWEEN 3 PRECEDING AND 1 PRECEDING), 2) AS moving_avg
FROM total_orders ;

---------------------------------------------------------------------------------------------------------
Отметьте в отдельной таблице тех курьеров, которые доставили в сентябре 2022 года заказов больше, чем в среднем все курьеры.
Сначала для каждого курьера в таблице courier_actions рассчитайте общее количество доставленных в сентябре заказов. 
Затем в отдельном столбце с помощью оконной функции укажите, сколько в среднем заказов доставили в этом месяце все курьеры. 
После этого сравните число заказов, доставленных каждым курьером, со средним значением в новом столбце. 
Если курьер доставил больше заказов, чем в среднем все курьеры, то в отдельном столбце с помощью CASE укажите число 1, в противном случае укажите 0.
Колонку с результатом сравнения назовите is_above_avg, колонку с числом доставленных заказов каждым курьером — delivered_orders, а колонку со средним значением — avg_delivered_orders. При расчёте среднего значения округлите его до двух знаков после запятой. Результат отсортируйте по возрастанию id курьера.
Поля в результирующей таблице: courier_id, delivered_orders, avg_delivered_orders, is_above_avg

WITH ct1 AS(
SELECT  courier_id, COUNT(order_id) AS delivered_orders, ROUND(AVG(COUNT(order_id)) OVER(), 2) AS avg_delivered_orders
FROM courier_actions
WHERE action = 'deliver_order' AND DATE_TRUNC('month', time) = '2022/09/01'
GROUP BY courier_id
)
SELECT courier_id, delivered_orders, avg_delivered_orders,
    CASE 
    WHEN delivered_orders > avg_delivered_orders THEN '1'
    ELSE '0'
    END AS is_above_avg
FROM ct1
ORDER BY courier_id ;

---------------------------------------------------------------------------------------------------------
Примените оконную функцию к таблице products и с помощью агрегирующей функции в отдельной колонке для каждой записи проставьте среднюю цену всех товаров. 
Колонку с этим значением назовите avg_price. 
Затем с помощью оконной функции и оператора FILTER в отдельной колонке рассчитайте среднюю цену товаров без учёта самого дорогого. 
Колонку с этим средним значением назовите avg_price_filtered. 
Полученные средние значения в колонках avg_price и avg_price_filtered округлите до двух знаков после запятой.
Выведите всю информацию о товарах, включая значения в новых колонках. Результат отсортируйте сначала по убыванию цены товара, затем по возрастанию id товара.
Поля в результирующей таблице: product_id, name, price, avg_price, avg_price_filtered

WITH max AS(
SELECT MAX(price) AS max_price
FROM products
)
SELECT product_id, name, price, ROUND(AVG(price) OVER(), 2) AS avg_price, ROUND(AVG(price) FILTER(WHERE price != (SELECT max_price FROM max)) OVER(), 2) AS avg_price_filtered
FROM products
ORDER BY price DESC, product_id ;

---------------------------------------------------------------------------------------------------------
Для каждой записи в таблице user_actions с помощью оконных функций и предложения FILTER посчитайте, 
сколько заказов сделал и сколько отменил каждый пользователь на момент совершения нового действия.
Иными словами, для каждого пользователя в каждый момент времени посчитайте две накопительные суммы — числа оформленных и числа отменённых заказов. 
Если пользователь оформляет заказ, то число оформленных им заказов увеличивайте на 1, если отменяет — увеличивайте на 1 количество отмен.
Колонки с накопительными суммами числа оформленных и отменённых заказов назовите соответственно created_orders и canceled_orders. 
На основе этих двух колонок для каждой записи пользователя посчитайте показатель cancel_rate, т.е. долю отменённых заказов в общем количестве оформленных заказов. 
Значения показателя округлите до двух знаков после запятой. 
Колонку с ним назовите cancel_rate.
В результате у вас должны получиться три новые колонки с динамическими показателями, которые изменяются во времени с каждым новым действием пользователя.
В результирующей таблице отразите все колонки из исходной таблицы вместе с новыми колонками. 
Отсортируйте результат по колонкам user_id, order_id, time — по возрастанию значений в каждой.
Добавьте в запрос оператор LIMIT и выведите только первые 1000 строк результирующей таблицы.
Поля в результирующей таблице:
user_id, order_id, action, time, created_orders, canceled_orders, cancel_rate

WITH ct1 AS(
SELECT user_id, order_id, action, time, 
    COUNT(order_id) FILTER(WHERE action = 'create_order') OVER(PARTITION BY user_id  ORDER BY time) AS created_orders, 
    COUNT(order_id) FILTER(WHERE action = 'cancel_order') OVER(PARTITION BY user_id  ORDER BY time) AS canceled_orders
FROM user_actions
)
SELECT user_id, order_id, action, time, created_orders, canceled_orders, ROUND(canceled_orders::DECIMAL / created_orders, 2) AS cancel_rate
FROM ct1
ORDER BY user_id, order_id, time
LIMIT 1000 ;

---------------------------------------------------------------------------------------------------------
Из таблицы courier_actions отберите топ 10% курьеров по количеству доставленных за всё время заказов. 
Выведите id курьеров, количество доставленных заказов и порядковый номер курьера в соответствии с числом доставленных заказов.
У курьера, доставившего наибольшее число заказов, порядковый номер должен быть равен 1, 
а у курьера с наименьшим числом заказов — числу, равному десяти процентам от общего количества курьеров в таблице courier_actions.
При расчёте номера последнего курьера округляйте значение до целого числа.
Колонки с количеством доставленных заказов и порядковым номером назовите соответственно orders_count и courier_rank. 
Результат отсортируйте по возрастанию порядкового номера курьера.
Поля в результирующей таблице: courier_id, orders_count, courier_rank

SELECT courier_id, COUNT(order_id) AS orders_count, ROW_NUMBER() OVER(ORDER BY COUNT(order_id) DESC, courier_id) AS courier_rank 
FROM courier_actions
WHERE action = 'deliver_order'
GROUP BY courier_id
LIMIT ROUND((SELECT COUNT(DISTINCT courier_id) FROM courier_actions) / 10.00) ;

---------------------------------------------------------------------------------------------------------
Отберите из таблицы courier_actions всех курьеров, которые работают в нашей компании 10 и более дней. 
Также рассчитайте, сколько заказов они уже успели доставить за всё время работы.
Будем считать, что наш сервис предлагает самые выгодные условия труда и поэтому за весь анализируемый период ни один курьер не уволился из компании. 
Возможные перерывы между сменами не учитывайте — для нас важна только разница во времени между первым действием курьера и текущей отметкой времени.
Текущей отметкой времени, относительно которой необходимо рассчитывать продолжительность работы курьера, 
считайте время последнего действия в таблице courier_actions. 
Учитывайте только целые дни, прошедшие с момента первого выхода курьера на работу (часы и минуты не учитывайте).
В результат включите три колонки: id курьера, продолжительность работы в днях и число доставленных заказов. 
Две новые колонки назовите соответственно days_employed и delivered_orders. 
Результат отсортируйте сначала по убыванию количества отработанных дней, затем по возрастанию id курьера.
Поля в результирующей таблице: courier_id, days_employed, delivered_orders

WITH mt AS(
SELECT MAX(DATE(time)) AS max_time
FROM courier_actions
),
work_days AS(
SELECT courier_id, (SELECT * FROM mt) - MIN(DATE(time)) AS days_employed, COUNT(order_id) FILTER(WHERE action = 'deliver_order') AS delivered_orders
FROM courier_actions
GROUP BY courier_id
)
SELECT courier_id, days_employed, delivered_orders
FROM work_days
WHERE days_employed > 9
ORDER BY days_employed DESC, courier_id ;

---------------------------------------------------------------------------------------------------------
На основе информации в таблицах orders и products рассчитайте стоимость каждого заказа, 
ежедневную выручку сервиса и долю стоимости каждого заказа в ежедневной выручке, выраженную в процентах. 
В результат включите следующие колонки: id заказа, время создания заказа, стоимость заказа, выручку за день, в который был совершён заказ, 
а также долю стоимости заказа в выручке за день, выраженную в процентах.
При расчёте долей округляйте их до трёх знаков после запятой.
Результат отсортируйте сначала по убыванию даты совершения заказа (именно даты, а не времени), 
потом по убыванию доли заказа в выручке за день, затем по возрастанию id заказа.
При проведении расчётов отменённые заказы не учитывайте.
Поля в результирующей таблице:
order_id, creation_time, order_price, daily_revenue, percentage_of_daily_revenue

WITH product_price AS(
SELECT order_id, DATE(creation_time) AS creation_time, product_id, price, SUM(price) OVER(PARTITION BY order_id) AS order_price, SUM(price) OVER(PARTITION BY DATE(creation_time)) AS daily_revenue
FROM (SELECT order_id, creation_time, UNNEST(product_ids) AS product_id FROM orders) t1
LEFT JOIN products t2
USING(product_id)
WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
),
ct1 AS(
SELECT order_id, order_price, daily_revenue, ROUND(order_price/daily_revenue::DECIMAL *100, 3) AS percentage_of_daily_revenue
FROM product_price
GROUP BY order_id, order_price, daily_revenue
)
SELECT order_id, creation_time, order_price, daily_revenue, percentage_of_daily_revenue
FROM ct1 t3
LEFT JOIN orders t4
USING(order_id)
ORDER BY DATE(creation_time) DESC, percentage_of_daily_revenue DESC, order_id

---------------------------------------------------------------------------------------------------------
На основе информации в таблицах orders и products рассчитайте ежедневную выручку сервиса и отразите её в колонке daily_revenue. 
Затем с помощью оконных функций и функций смещения посчитайте ежедневный прирост выручки. 
Прирост выручки отразите как в абсолютных значениях, так и в % относительно предыдущего дня. 
Колонку с абсолютным приростом назовите revenue_growth_abs, а колонку с относительным — revenue_growth_percentage.
Для самого первого дня укажите прирост равным 0 в обеих колонках. При проведении расчётов отменённые заказы не учитывайте. 
Результат отсортируйте по колонке с датами по возрастанию.
Метрики daily_revenue, revenue_growth_abs, revenue_growth_percentage округлите до одного знака при помощи ROUND().
Поля в результирующей таблице: date, daily_revenue, revenue_growth_abs, revenue_growth_percentage

WITH daily_products AS(
SELECT DATE(creation_time) AS date, UNNEST(product_ids) AS product_id
FROM orders
WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
),
daily_sum AS(
SELECT date, product_id, price, SUM(price) OVER(PARTITION BY date) AS daily_revenue
FROM daily_products
LEFT JOIN products
USING(product_id)
),
daily_rev AS(
SELECT date, AVG(daily_revenue) AS daily_revenue
FROM daily_sum
GROUP BY date
)
SELECT ROUND(daily_revenue, 1) AS daily_revenue, date, ROUND(COALESCE(daily_revenue - LAG(daily_revenue) OVER(), 0), 1) AS revenue_growth_abs, ROUND(COALESCE(daily_revenue / LAG(daily_revenue) OVER() * 100 - 100, 0), 1) AS revenue_growth_percentage
FROM daily_rev
ORDER BY date ;

---------------------------------------------------------------------------------------------------------
